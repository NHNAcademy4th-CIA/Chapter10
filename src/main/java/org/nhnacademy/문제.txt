1. 일반 프로그래밍 이란 무엇을 의미하며 대안은 무엇입니까?
일반 프로그래밍이란 다양한 유형의 데이터에 사용할 수 있는 데이터 구조와 서브루틴을 작성하는 것을 의미합니다. 대안은 유형 이름을 제외하고 본질적으로 모두 동일하더라도 서로 다른 유형의 데이터 각각에 대해 새로운 데이터 구조 또는 서브루틴을 작성하는 것입니다. 예를 들어, 모든 유형의 데이터가 포함된 목록을 정렬하는 데 단일 일반 정렬 루틴을 사용할 수 있습니다. 대안으로는 정수 목록 정렬 루틴, 문자열 목록 정렬 루틴, 실수 배열 저장 루틴 등이 있습니다.

2. LinkedList<int> 유형의 객체를 만들 수 없는 이유는 무엇입니까 ? 대신 무엇을 해야 할까요?
LinkedList<int>는 기본 유형인 int 유형의 유형 매개변수와 함께 일반 클래스를 사용하려는 시도입니다 . Java의 일반 프로그래밍은 기본 유형이 아닌 객체에 대해서만 작동하므로 기본 유형의 유형 매개변수는 허용되지 않습니다. 그러나 int 대신 래퍼 클래스 Integer를 사용할 수 있습니다 . LinkedList<Integer> 유형의 객체는 실제로 int 목록인 것처럼 거의 사용할 수 있습니다 .

3. 반복자란 무엇 이며 일반 프로그래밍에 반복자가 필요한 이유는 무엇입니까?
Java의 일반 프로그래밍 프레임워크의 주요 기능 중 하나는 컬렉션 입니다 . 컬렉션에는 여러 유형이 있습니다( LinkedList , ArrayList , TreeSet 및 HashSet 포함 ). 다양한 유형의 컬렉션을 모두 일반적인 방식으로 처리하려면 컬렉션의 모든 요소에 액세스하는 일반적인 방법이 필요합니다. 반복자가 이를 가능하게 합니다. 반복자는 컬렉션을 순회하는 것(즉, 컬렉션의 각 항목을 차례로 방문하는 것)을 가능하게 하는 컬렉션과 연결된 개체입니다. 반복자를 사용하여 작성된 코드는 모든 유형의 컬렉션에서 작동합니다. (그러나 for-each 루프를 사용하면 반복자의 명시적인 사용을 피할 수 있는 경우가 많습니다.)

4. 정수가 Collection<Integer> 유형의 변수라고 가정합니다 . 컬렉션에 있는 모든 정수 값의 합계를 계산하기 위해 반복자를 사용하는 코드 세그먼트를 작성하세요. for-each 루프를 사용하여 동일한 작업을 수행하는 두 번째 코드 세그먼트를 작성합니다.
정수 합계 = 0;
Iterator<Integer> iter = Integer.iterator();
while( iter.hasNext() ) {
   sum += iter.next();
}

정수 합계 = 0;
for ( int number : 정수 ) { // ( "정수 수 : 정수"를 사용할 수도 있습니다. )
   합계 += 숫자;
}
정수에 null 값이 포함되어 있으면 이 두 솔루션 중 하나가 실패합니다 .

5. List , Set 및 Map 과 같은 인터페이스는 추상 데이터 유형을 정의합니다 . 이것이 무엇을 의미하는지 설명하세요.
추상 데이터 유형은 데이터가 실제로 저장되는 방식이나 작업이 구현되는 방식이 아니라 수행할 수 있는 작업에 의해 정의됩니다. List 와 같은 인터페이스는 수행할 수 있는 작업을 정의하지만 구현 방법에 대해서는 아무 것도 알려주지 않습니다. 실제로 다양한 구현이 있을 수 있습니다. 예를 들어 LinkedList 와 ArrayList는 모두 List 인터페이스를 구현합니다 . 이들은 동일한 추상 데이터 유형을 구현하는 서로 다른 "구체적인" 데이터 유형입니다.

6. 세트를 다른 유형의 컬렉션 과 구별하는 기본 속성은 무엇입니까 ?
세트 에는 중복 요소가 포함될 수 없습니다. 해당 항목이 이미 세트에 있는 경우 세트에 항목을 추가해도 아무런 효과가 없습니다. (두 항목이 동일하다는 말의 정확한 의미는 집합 유형에 따라 다릅니다. HashSet 의 경우 두 항목의 동등성은 equals() 메서드를 사용하여 테스트됩니다 . TreeSet 의 경우 동등성 테스트에서는 CompareTo ( ) Comparable 인터페이스 의 메소드 또는 Comparator 의 Compare() 메소드 .)


7. TreeMap 과 HashMap 의 기능상 근본적인 차이점은 무엇입니까 ?
TreeMap 의 키/값 쌍은 키가 오름차순으로 정렬됩니다. (이러한 이유로, CompareTo() 메서드나 Compare() 를 사용하여 TreeMap 의 키를 비교할 수 있어야 합니다 . 비교를 수행하려면 키가 Comparable 인터페이스를 구현하거나 Comparator를 제공해야 합니다.)
리니어...

8. 해시 코드 가 무엇을 의미하는지 설명하세요 .
개체의 해시 코드는 해당 개체가 해시 테이블에 저장되어야 하는 위치를 알려주는 정수입니다. 해시 테이블은 연결된 목록의 배열입니다. 객체가 해시 테이블에 저장되면 이러한 연결 목록 중 하나에 추가됩니다. 객체의 해시 코드는 객체가 저장된 배열 내 위치의 인덱스입니다. 동일한 해시 코드를 가진 모든 객체는 동일한 연결 목록에 들어갑니다. Java에서 모든 객체 obj에는 객체의 해시 코드를 계산하는 데 사용되는 obj.hashCode() 메서드가 있습니다 . 객체가 N 크기의 해시 테이블에 저장되는 경우 객체에 사용되는 해시 코드는 Math.abs(obj.hashCode()) % N 입니다 .

9:Comparable<Date> 인터페이스를 구현하도록 다음 Date 클래스를 수정합니다 . Date 유형의 객체에 대한 순서는 자연스럽고 시간순으로 정렬되어야 합니다.

수업 날짜 {
   월; // 1~12 범위의 월 번호입니다.
   하루; // 1~31 범위의 일 수입니다.
   연도; // 연도.
   날짜(int m, int d, int y) {
      월 = m;
      일 = d;
      연도 = y;
   }
}
또한 결과 Date 클래스를 레코드 클래스로 다시 작성합니다. ( 섹션 7.4 참조 )

답Comparable<Date> 인터페이스는 Date 유형의 두 개체를 비교하는 데 사용되는 "public int CompareTo(Date d)" 메서드를 지정합니다 . 클래스에 CompareTo() 메서드를 추가해야 하며, 인터페이스를 구현하려면 클래스를 선언해야 합니다 . 두 날짜를 비교하려면 먼저 연도를 비교해 보세요. 연도가 같으면 월을 비교해 보세요. 월도 동일하면 날짜를 비교하십시오.

Date 클래스는 Comparable<Date> {를 구현합니다.
   월; // 1~12 범위의 월 번호입니다.
   하루; // 1~31 범위의 일 수입니다.
   연도; // 연도.
   날짜(int m, int d, int y) {
      월 = m;
      일 = d;
      연도 = y;
   }
   공개 int 비교To( 날짜 otherDate ) {
           // 이 날짜가 다음보다 크거나 같은 경우 1, 0 또는 -1을 반환합니다.
           // 또는 otherDate보다 작습니다.
      if (연도 < otherDate.year)
         -1을 반환합니다.
      else if (연도 > otherDate.year)
         1을 반환합니다.
      else { // 연도는 동일합니다. 달을 비교해보세요.
         if (월 < otherDate.month)
            -1을 반환합니다.
         else if (월 > otherDate.month)
            1을 반환합니다.
         else { // 연도와 월이 동일합니다. 일을 비교하십시오.
            if (일 < otherDate.day)
               -1을 반환합니다.
            else if (일 > otherDate.day)
               1을 반환합니다.
            또 다른
               0을 반환합니다.
         }
      }
   }
}
이 클래스를 레코드 클래스로 다시 작성하면 클래스의 인스턴스 변수가 클래스 이름 뒤의 괄호 안에 나열되고 정식 생성자가 자동으로 제공됩니다. 그러나 Comparable 인터페이스도 같은 방식으로 클래스에 추가됩니다. 레코드 클래스는 다른 클래스를 확장할 수 없지만 인터페이스를 구현할 수 있습니다. 물론 이 레코드 클래스는 다른 많은 개선점을 사용할 수 있습니다.

기록 날짜(int 월, int 일, int 연도)
                        Comparable<Date> {를 구현합니다.
   공개 int 비교To( 날짜 otherDate ) {
           // 이 날짜가 다음보다 크거나 같은 경우 1, 0 또는 -1을 반환합니다.
           // 또는 otherDate보다 작습니다.
      if (연도 < otherDate.year)
         -1을 반환합니다.
      else if (연도 > otherDate.year)
         1을 반환합니다.
      else { // 연도는 동일합니다. 달을 비교해보세요.
         if (월 < otherDate.month)
            -1을 반환합니다.
         else if (월 > otherDate.month)
            1을 반환합니다.
         else { // 연도와 월이 동일합니다. 일을 비교하십시오.
            if (일 < otherDate.day)
               -1을 반환합니다.
            else if (일 > otherDate.day)
               1을 반환합니다.
            또 다른
               0을 반환합니다.
         }
      }
   }
}
질문 10:

강의 계획서가 TreeMap<Date,String> 유형의 변수라고 가정합니다 . 여기서 Date 는 이전 연습의 클래스입니다. 2021년 12월에 있는 모든 키에 대한 값 문자열을 작성하는 코드 세그먼트를 작성하세요.

답변:

나는 두 가지 해결책을 제시할 것이다. 그 중 하나는 단순히 지도에서 2021년 12월의 각 날짜를 조회하고 해당 값이 있는 경우 이를 인쇄합니다. 다른 하나는 해당 월의 날짜에 대한 모든 항목을 포함하는 서브맵을 반복합니다.

지도의 get() 메소드를 사용하는 솔루션:

      for (int 일 = 1; 일 <= 31; 일++) {
           // 2021년 12월 하루 동안의 정보를 가져옵니다.
         날짜 날짜 = 새 날짜(12,일,2021); // 열쇠.
         문자열 정보 = syllabus.get(date); // 해당 키의 값을 가져옵니다.
                                            //(값이 없으면 null일 수 있음)
                                            // 이 날짜에 대한 지도 항목입니다.)
         if (정보 != null)
            System.out.println("12월 " + day + ": " + info);
      }


서브맵을 사용하는 솔루션(더 어렵지만 더 효율적):

      날짜 startDate = new Date(12,1,2021); // 서브맵의 시작 날짜입니다.
      날짜 endDate = new Date(1,1,2022); // 서브맵 종료 날짜입니다.
                                            //(종료일을 기억하세요.
                                            //포함되지 않습니다.)
      Map<Date,String> decemberData = syllabus.subMap(startDate, endDate);
      for ( Map.Entry<Date,String> 항목 : decemberData ) {
         날짜 날짜 =entry.getKey();
         문자열 정보 =entry.getValue();
         System.out.println("12월 " + date.day + ": " + info);
      }
var를
사용하여 지역 변수를 선언하면 다음과 같이 작성할 수도 있습니다.

      날짜 startDate = new Date(12,1,2021); // 서브맵의 시작 날짜입니다.
      날짜 endDate = new Date(1,1,2022); // 서브맵 종료 날짜입니다.
                                            //(종료일을 기억하세요.
                                            //포함되지 않습니다.)
      var decemberData = syllabus.subMap(startDate, endDate);
      for ( var 항목 : decemberData ) {
         날짜 날짜 =entry.getKey();
         문자열 정보 =entry.getValue();
         System.out.println("12월 " + date.day + ": " + info);
      }
질문 11:

T 유형의 객체 스택을 나타내는 데 사용할 수 있는 일반 클래스 Stack<T>를 작성합니다 . 클래스에는 push() , pop() 및 isEmpty() 메서드가 포함되어야 합니다 . 클래스 내에서 ArrayList를 사용하여 스택에 항목을 보관합니다.

답변:

공개 클래스 Stack<T> {
   ArrayList<T> 스택 = new ArrayList<T>();
   공개 무효 푸시( T newItem ) {
      stack.add(newItem);
   }
   공개 T 팝() {
      if ( isEmpty() ) {
          throw new IllegalStateException("빈 스택에서 팝할 수 없습니다.");
      }
      int top = stack.size() - 1; // 최상위 항목의 위치
      return stack.remove(top); // 최상위 항목을 제거하고 반환합니다.
   }
   공개 부울 isEmpty() {
      return stack.size() == 0;
   }
}
질문 12:

지정된 항목의 ArrayList<T> 에 있는 모든 항목을 지정된 대체 항목으로 바꾸는 제네릭 유형 매개변수 <T>를 사용하여 제네릭 메서드를 작성합니다. 목록과 두 항목은 메서드에 대한 매개변수입니다. 두 항목 모두 T 유형입니다 . 교체되는 항목이 null 일 수 있다는 사실을 고려하세요 . null이 아닌 항목의 경우 equals()를 사용하여 비교를 수행합니다.

답변:

이 메소드는 ArrayLists 에서 작동하므로 get(i) 및 set(i,item) 메소드를 통해 색인화된 액세스를 사용할 수 있습니다 . 이러한 작업은 배열 목록에 효율적입니다. 또한 목록 반복자를 사용하고 모든 유형의 목록에 효율적인 두 번째 버전의 메서드도 제공합니다.

공개 정적 <T> void replacementAll(ArrayList<T> 목록, T oldItem, T newItem) {
   if (oldItem == null) {
      for (int i = 0; i < list.size(); i++) {
         if ( null == list.get(i) )
            list.set(i, newItem);
      }
   }
   또 다른 {
      for (int i = 0; i < list.size(); i++) {
         if ( oldItem.equals(list.get(i)) )
            list.set(i, newItem);
      }
   }
}


public static <T> void replacementAll(List<T> list, T oldItem, T newItem) {
   ListIterator<T> iter = list.listIterator();
   동안(iter.hasNext()) {
      T listItem = iter.next();
      if (oldItem == null ) {
         if ( listItem == null )
            iter.set(newItem);
      }
      또 다른 {
         if ( oldItem.equals(listItem) )
            iter.set(newItem);
      }
   }
}
(참고로, replacementAll 메소드 는 이미 Collections 클래스에 정적 메소드로 정의되어 있습니다 .)

질문 13:

단어가 문자열 의 배열이라고 가정합니다 . 다음 코드로 수행되는 작업을 설명하세요.

long n = Arrays.stream(words)
               .filter( w -> (w != null) )
               .map( w -> w.toLowerCase() )
               .distinct()
               .count();
답변:

이 코드는 대소문자를 무시하고 배열에 있는 다양한 문자열의 수를 계산합니다. 배열의 모든 문자열을 포함하는 스트림으로 시작합니다. filter () 작업은 null이 아닌 값만 허용합니다. 이렇게 하면 w.toLowerCase()가 평가될 때 다음 단계에서 NullPointerExcetion이 발생하지 않게 됩니다 . map ()은 스트림의 각 문자열을 소문자 버전으로 대체하므로 동일한 문자열의 대문자 버전과 소문자 버전 간에 차이가 없습니다. Unique ()는 스트림에서 중복을 제거합니다. 그리고 count()는 결과의 문자열 수를 반환합니다. 스트림에는 이제 배열에서 발생하는 모든 문자열의 소문자 복사본이 하나만 포함됩니다.

질문 14:

스트림 API를 사용하여 2부터 20까지의 모든 짝수 정수를 인쇄합니다. IntStream.range 로 시작 하고 필터 작업을 적용합니다.

답변:

IntStream.range(2,20)
         .filter(n -> (n % 2 == 0) )
         .forEach(n -> System.out.println(n) );
( IntStream.range() 는 2부터 20까지의 모든 정수를 포함하는 스트림을 생성하는 데 사용할 수 있습니다. " n -> (n%2 == 0) " 술어는 짝수 정수에 대해서만 true이므로 필터 작업에는 숫자 2, 4, ... 20이 포함됩니다. 마지막 으로 forEach 터미널 연산자 를 사용하여 스트림의 각 숫자에 작업을 적용할 수 있습니다. forEachOrdered 작업 도 작동하지만 스트림이 순차적이므로 , forEach는 숫자를 순서대로 인쇄합니다. 병렬 스트림을 사용하는 경우 forEach가 숫자를 순서대로 인쇄할 수 있습니다.)

질문 15:

유형 매개변수 <T>를 사용하여 제네릭 메소드 countIf(c,t)를 작성합니다 . 여기서 첫 번째 매개변수 c 는 Collection<T> 유형 이고 두 번째 매개변수 p 는 Predicate<T> 유형입니다 . 이 메서드는 조건자가 true인 컬렉션의 항목 수를 반환해야 합니다. 두 가지 버전을 제공합니다. 하나는 루프를 사용하고 다른 하나는 스트림 API를 사용합니다.

답변:

첫 번째 버전은 for-each 루프를 사용하고, 조건자가 true인지 테스트하기 위해 조건자 에 test() 라는 부울 값 함수가 포함되어 있다는 사실을 사용합니다 .

public static <T> int countIf( Collection<T> 항목, Predicate<T> pred ) ) {
    정수 개수 = 0;
    for ( T x : 항목 ) {
        if ( pred.test(x) )
            카운트++;
    }
    반환 횟수;
}
두 번째 버전은 조건자가 true인 항목만 통과시키는 filter() 작업 과 함께 스트림 API를 사용합니다 . filter()는 술어인 매개변수를 취한다는 점에 유의하세요 . 일반적으로 매개변수는 람다 표현식으로 제공되지만 이 경우 조건자는 pred 이므로 pred 를 filter() 에 매개변수로 전달해야 합니다 .

public static <T> int countIf( Collection<T> 항목, Predicate<T> pred ) {
    Long ct = items.parallelStream()
                   .filter(예측)
                   .세다();
         // .count()는 long을 반환하지만 countIf에서는 int를 반환하고 싶습니다.
    (int)ct를 반환합니다;
}

