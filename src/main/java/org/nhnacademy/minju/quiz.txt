Question 1:What is meant by generic programming and what is the alternative?
- 많은 타입의 데이터에 대해 작동하는 코드를 작성하는 것 ⇒ type을 변수화(parameterized type)
- alternative : 각각의 타입에 대해 새로운 서브루틴이나 data structure를 작성하는 것

Question 2:Why can't you make an object of type LinkedList<int>? What should you do instead?
- int가 객체가 아니다
- int 대신 Integer를 사용

Question 3:What is an iterator and why are iterators necessary for generic programming?
- 컬렉션을 순회하는 데 사용될 수 있는 개체
- 반복자를 사용하여 컬렉션을 순회하는 알고리즘은 일반적인데, 이는 같은 기술이 모든 유형의 컬렉션에 적용될 수 있기 때문입니다.
- linear하지 않은 map, stack 등을 iterator를 통해 순회를 시키겠다.

Question 4:Suppose that integers is a variable of type Collection<Integer>. Write a code segment that uses an iterator to compute the sum of all the integer values in the collection. Write a second code segment that does the same thing using a for-each loop.
Iterator<Integer> iterator = Collection.iterator();
int sum = 0;
while(iterator.hasNext()) {
	sum+=iterator.next;
}

Question 5:Interfaces such as List, Set, and Map define abstract data types. Explain what this means.
- 기능만 명시해 놓은 타입. 구현은 implements 받은 클래스가 한다.

Question 6:What is the fundamental property that distinguishes Sets from other types of Collections?
- 중복 요소가 포함될 수 없다, 순서도 없다(linear하지 않음)

Question 7:What is the essential difference in functionality between a TreeMap and a HashMap?
- TreeMap은 키와 값 쌍이 오름차순으로 정렬된다. (자동 정렬)

Question 8:Explain what is meant by a hash code.
- 키에 대한 배열 인덱스(해시 테이블에 저장되어야 하는 위치)

Question 9:Modify the following Date class so that it implements the interface Comparable<Date>. The ordering on objects of type Date should be the natural, chronological ordering.

class Date {
   int month;  // Month number in range 1 to 12.
   int day;    // Day number in range 1 to 31.
   int year;   // Year number.
   Date(int m, int d, int y) {
      month = m;
      day = d;
      year = y;
   }
}
Also, rewrite the resulting Date class as a record class. (See Section 7.4.)

class Date implements Comparable<Date> {
   int month;  // Month number in range 1 to 12.
   int day;    // Day number in range 1 to 31.
   int year;   // Year number.
   Date(int m, int d, int y) {
      month = m;
      day = d;
      year = y;
   }
   public int compareTo( Date date ) {
      if (year < date.year) {
         return -1;
			}
      else if (year > date.year) {
         return 1;
			}
      else { // 같음
         if (month < date.month) {
            return -1;
					}
         else if (month > date.month) {
            return 1;
					}
         else { // 같음
            if (day < date.day) {
               return -1;
						}
            else if (day > date.day) {
               return 1;
						}
            else {
               return 0;
						}
         }
      }
   }
}

Question 10:Suppose that syllabus is a variable of type TreeMap<Date,String>, where Date is the class from the preceding exercise. Write a code segment that will write out the value string for every key that is in the month of December, 2021.
for (int day = 1; day <= 31; day++) {
         Date date = new Date(12,day,2021);
         String str = syllabus.get(date);
         if (info != null) {
            System.out.println("december " + day + ": " + str);
				}
}

Question 11:Write a generic class Stack<T> that can be used to represent stacks of objects of type T. The class should include methods push(), pop(), and isEmpty(). Inside the class, use an ArrayList to hold the items on the stack.
public class Stack<T> {
   ArrayList<T> stack = new ArrayList<T>();
   public void push( T newItem ) {
      stack.add(newItem);
   }
   public T pop() {
      if ( isEmpty() ) {
          throw new IllegalStateException("empty stack");
      }
      int top = stack.size() - 1;
      return stack.remove(top);
   }
   public boolean isEmpty() {
      return stack.size() == 0;
   }
}

Question 12:Write a generic method, using a generic type parameter <T>, that replaces every occurrence in an ArrayList<T> of a specified item with a specified replacement item. The list and the two items are parameters to the method. Both items are of type T. Take into account the fact that the item that is being replaced might be null. For a non-null item, use equals() to do the comparison.

public static <T> void replaceAll(ArrayList<T> list, T oldItem, T newItem) {
   if (oldItem == null) {
      for (int i = 0; i < list.size(); i++) {
         if (list.get(i)==null) {
            list.set( i, newItem );
					}
      }
   }
   else {
      for (int i = 0; i < list.size(); i++) {
         if (oldItem.equals(list.get(i))) {
            list.set(i, newItem);
					}
      }
   }
}

Question 13:Suppose that words is an array of Strings. Explain what is done by the following code:

long n = Arrays.stream(words)
               .filter( w -> (w != null) )
               .map( w -> w.toLowerCase() )
               .distinct()
               .count();

- null이 아닌 words를 각각의 요소를 소문자로 치환하고 String을 중복을 제외하고 개수를 센다.

Question 14:Use the stream API to print all the even integers from 2 to 20. Start with IntStream.range and apply a filter operation.
- IntStream.range(2, 20).filter(n->n%2==0).forEach(n->System.out.println(n));

Question 15:Write a generic method countIf(c,t) with type parameter <T>, where the first parameter, c, is of type Collection<T>, and the second parameter, p, is of type Predicate<T>. The method should return the number of items in the collection for which the predicate is true. Give two versions, one using a loop and the other using the stream API.
public static <T> int countlf(Collection<T> coll, Predicate<T> pred) {
	int count = 0;
	for(T t : coll) {
		if(pred.test(t)) {
			count++;
		}
	return count;
}